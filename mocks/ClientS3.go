// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ClientS3 is an autogenerated mock type for the ClientS3 type
type ClientS3 struct {
	mock.Mock
}

type ClientS3_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientS3) EXPECT() *ClientS3_Expecter {
	return &ClientS3_Expecter{mock: &_m.Mock}
}

// DeleteObject provides a mock function with given fields: ctx, bucketName, key
func (_m *ClientS3) DeleteObject(ctx context.Context, bucketName string, key string) error {
	ret := _m.Called(ctx, bucketName, key)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, bucketName, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientS3_DeleteObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObject'
type ClientS3_DeleteObject_Call struct {
	*mock.Call
}

// DeleteObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - key string
func (_e *ClientS3_Expecter) DeleteObject(ctx interface{}, bucketName interface{}, key interface{}) *ClientS3_DeleteObject_Call {
	return &ClientS3_DeleteObject_Call{Call: _e.mock.On("DeleteObject", ctx, bucketName, key)}
}

func (_c *ClientS3_DeleteObject_Call) Run(run func(ctx context.Context, bucketName string, key string)) *ClientS3_DeleteObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ClientS3_DeleteObject_Call) Return(_a0 error) *ClientS3_DeleteObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientS3_DeleteObject_Call) RunAndReturn(run func(context.Context, string, string) error) *ClientS3_DeleteObject_Call {
	_c.Call.Return(run)
	return _c
}

// GetObject provides a mock function with given fields: ctx, bucket, key
func (_m *ClientS3) GetObject(ctx context.Context, bucket string, key string) ([]byte, error) {
	ret := _m.Called(ctx, bucket, key)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, error)); ok {
		return rf(ctx, bucket, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, bucket, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientS3_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type ClientS3_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucket string
//   - key string
func (_e *ClientS3_Expecter) GetObject(ctx interface{}, bucket interface{}, key interface{}) *ClientS3_GetObject_Call {
	return &ClientS3_GetObject_Call{Call: _e.mock.On("GetObject", ctx, bucket, key)}
}

func (_c *ClientS3_GetObject_Call) Run(run func(ctx context.Context, bucket string, key string)) *ClientS3_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ClientS3_GetObject_Call) Return(_a0 []byte, _a1 error) *ClientS3_GetObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientS3_GetObject_Call) RunAndReturn(run func(context.Context, string, string) ([]byte, error)) *ClientS3_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// PutObject provides a mock function with given fields: ctx, bucket, key, data
func (_m *ClientS3) PutObject(ctx context.Context, bucket string, key string, data []byte) error {
	ret := _m.Called(ctx, bucket, key, data)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) error); ok {
		r0 = rf(ctx, bucket, key, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientS3_PutObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObject'
type ClientS3_PutObject_Call struct {
	*mock.Call
}

// PutObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucket string
//   - key string
//   - data []byte
func (_e *ClientS3_Expecter) PutObject(ctx interface{}, bucket interface{}, key interface{}, data interface{}) *ClientS3_PutObject_Call {
	return &ClientS3_PutObject_Call{Call: _e.mock.On("PutObject", ctx, bucket, key, data)}
}

func (_c *ClientS3_PutObject_Call) Run(run func(ctx context.Context, bucket string, key string, data []byte)) *ClientS3_PutObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]byte))
	})
	return _c
}

func (_c *ClientS3_PutObject_Call) Return(_a0 error) *ClientS3_PutObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientS3_PutObject_Call) RunAndReturn(run func(context.Context, string, string, []byte) error) *ClientS3_PutObject_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientS3 creates a new instance of ClientS3. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientS3(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientS3 {
	mock := &ClientS3{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
