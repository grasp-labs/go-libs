// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	sqs "github.com/aws/aws-sdk-go-v2/service/sqs"
	mock "github.com/stretchr/testify/mock"
)

// APISqs is an autogenerated mock type for the APISqs type
type APISqs struct {
	mock.Mock
}

type APISqs_Expecter struct {
	mock *mock.Mock
}

func (_m *APISqs) EXPECT() *APISqs_Expecter {
	return &APISqs_Expecter{mock: &_m.Mock}
}

// GetQueueUrl provides a mock function with given fields: ctx, params, optFns
func (_m *APISqs) GetQueueUrl(ctx context.Context, params *sqs.GetQueueUrlInput, optFns ...func(*sqs.Options)) (*sqs.GetQueueUrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueueUrl")
	}

	var r0 *sqs.GetQueueUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.GetQueueUrlInput, ...func(*sqs.Options)) (*sqs.GetQueueUrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.GetQueueUrlInput, ...func(*sqs.Options)) *sqs.GetQueueUrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.GetQueueUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sqs.GetQueueUrlInput, ...func(*sqs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APISqs_GetQueueUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueueUrl'
type APISqs_GetQueueUrl_Call struct {
	*mock.Call
}

// GetQueueUrl is a helper method to define mock.On call
//   - ctx context.Context
//   - params *sqs.GetQueueUrlInput
//   - optFns ...func(*sqs.Options)
func (_e *APISqs_Expecter) GetQueueUrl(ctx interface{}, params interface{}, optFns ...interface{}) *APISqs_GetQueueUrl_Call {
	return &APISqs_GetQueueUrl_Call{Call: _e.mock.On("GetQueueUrl",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *APISqs_GetQueueUrl_Call) Run(run func(ctx context.Context, params *sqs.GetQueueUrlInput, optFns ...func(*sqs.Options))) *APISqs_GetQueueUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*sqs.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*sqs.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*sqs.GetQueueUrlInput), variadicArgs...)
	})
	return _c
}

func (_c *APISqs_GetQueueUrl_Call) Return(_a0 *sqs.GetQueueUrlOutput, _a1 error) *APISqs_GetQueueUrl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APISqs_GetQueueUrl_Call) RunAndReturn(run func(context.Context, *sqs.GetQueueUrlInput, ...func(*sqs.Options)) (*sqs.GetQueueUrlOutput, error)) *APISqs_GetQueueUrl_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: ctx, params, optFns
func (_m *APISqs) SendMessage(ctx context.Context, params *sqs.SendMessageInput, optFns ...func(*sqs.Options)) (*sqs.SendMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 *sqs.SendMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.SendMessageInput, ...func(*sqs.Options)) (*sqs.SendMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sqs.SendMessageInput, ...func(*sqs.Options)) *sqs.SendMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.SendMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sqs.SendMessageInput, ...func(*sqs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APISqs_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type APISqs_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - params *sqs.SendMessageInput
//   - optFns ...func(*sqs.Options)
func (_e *APISqs_Expecter) SendMessage(ctx interface{}, params interface{}, optFns ...interface{}) *APISqs_SendMessage_Call {
	return &APISqs_SendMessage_Call{Call: _e.mock.On("SendMessage",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *APISqs_SendMessage_Call) Run(run func(ctx context.Context, params *sqs.SendMessageInput, optFns ...func(*sqs.Options))) *APISqs_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*sqs.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*sqs.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*sqs.SendMessageInput), variadicArgs...)
	})
	return _c
}

func (_c *APISqs_SendMessage_Call) Return(_a0 *sqs.SendMessageOutput, _a1 error) *APISqs_SendMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APISqs_SendMessage_Call) RunAndReturn(run func(context.Context, *sqs.SendMessageInput, ...func(*sqs.Options)) (*sqs.SendMessageOutput, error)) *APISqs_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewAPISqs creates a new instance of APISqs. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPISqs(t interface {
	mock.TestingT
	Cleanup(func())
}) *APISqs {
	mock := &APISqs{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
