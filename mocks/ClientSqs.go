// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/aws/aws-sdk-go-v2/service/sqs/types"
)

// ClientSqs is an autogenerated mock type for the ClientSqs type
type ClientSqs struct {
	mock.Mock
}

type ClientSqs_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientSqs) EXPECT() *ClientSqs_Expecter {
	return &ClientSqs_Expecter{mock: &_m.Mock}
}

// SendMsg provides a mock function with given fields: ctx, input
func (_m *ClientSqs) SendMsg(ctx context.Context, input map[string]types.MessageAttributeValue) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for SendMsg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]types.MessageAttributeValue) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientSqs_SendMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMsg'
type ClientSqs_SendMsg_Call struct {
	*mock.Call
}

// SendMsg is a helper method to define mock.On call
//   - ctx context.Context
//   - input map[string]types.MessageAttributeValue
func (_e *ClientSqs_Expecter) SendMsg(ctx interface{}, input interface{}) *ClientSqs_SendMsg_Call {
	return &ClientSqs_SendMsg_Call{Call: _e.mock.On("SendMsg", ctx, input)}
}

func (_c *ClientSqs_SendMsg_Call) Run(run func(ctx context.Context, input map[string]types.MessageAttributeValue)) *ClientSqs_SendMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]types.MessageAttributeValue))
	})
	return _c
}

func (_c *ClientSqs_SendMsg_Call) Return(_a0 error) *ClientSqs_SendMsg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientSqs_SendMsg_Call) RunAndReturn(run func(context.Context, map[string]types.MessageAttributeValue) error) *ClientSqs_SendMsg_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientSqs creates a new instance of ClientSqs. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientSqs(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientSqs {
	mock := &ClientSqs{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
